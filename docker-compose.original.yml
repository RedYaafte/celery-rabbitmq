version: "3.5"
services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:latest
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: on-failure
  sql:
    image: "${SQL_IMAGE}"
    container_name: "${SQL_HOST}"
    environment:
      PGDATA: "${SQL_DATA_INSIDE}/pgdata"
    expose:
      - "${SQL_PORT}"
    volumes:
      - "${SQL_DATA_OUTSIDE}:${SQL_DATA_INSIDE}"
  app:
    image: "${APP_IMAGE}"
    # command: sh -c "chmod u+x wait-for-it.sh &&
    #   ./wait-for-it.sh www.google.com:80 -- echo 'camaraaaasss hijo --------->'"
    # command: sh -c "
    #   chmod u+x wait-for-it.sh &&
    #   pip install -r requirements.txt &&
    #   ./wait-for-it.sh dcr:8000 -- celery -A tasks worker --loglevel=info &&
    #   python manage.py runserver 0:8000"
    command: bash -c "
      chmod u+x wait-for-it.sh
      && pip install -r requirements.txt
      && python manage.py runserver 0:8000"
    # command: bash -c "
    #   chmod u+x wait-for-it.sh
    #   && pip install celery
    #   && ./wait-for-it.sh dcr:8000 -- ls"
    # && ./wait-for-it.sh dcr:8000 -- celery -A tasks worker --loglevel=info"
    # command:
    #   [
    #     sh,
    #     -c,
    #     "chmod u+x wait-for-it.sh",
    #     "./wait-for-it.sh www.google.com:80 -- echo 'camaraaaasss hijo --------->'",
    #     "pip install -r requirements.txt",
    #     "python manage.py runserver 0:8000",
    #   ]
    container_name: "${APP_CONTAINER}"
    env_file:
      - .env
    environment:
      VIRTUAL_HOST: "${APP_CONTAINER}"
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - "${APP_VOLUME}"
    working_dir: "${APP_WORKING_DIR}"
    depends_on:
      - sql
      - rabbitmq
  celery:
    build: .
    command: celery -A tasks worker -l info
    volumes:
      - .:/code
    depends_on:
      - sql
      - rabbitmq
networks:
  default:
    name: "${NETWORK}"
